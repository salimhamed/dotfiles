#!/bin/bash

# prompt for system password
sudo -v

# Add the docker repository to apt sources
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" |
  sudo tee /etc/apt/sources.list.d/docker.list >/dev/null

# update apt
sudo apt-get update

# update package lists
echo "Updating package lists..."
sudo apt update -y

# install packages from a list
if [ -f "$HOME/.ubuntu-packages" ]; then
  echo "Installing packages from .ubuntu-packages..."
  xargs sudo apt install -y <"$HOME/.ubuntu-packages"
fi

# upgrade all installed packages
echo "Upgrading all installed packages..."
sudo apt upgrade -y

# remove unnecessary packages
echo "Removing unnecessary packages..."
sudo apt autoremove -y

# Add Docker's official GPG key
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Change the default shell to Zsh
if [ "$SHELL" != "$(which zsh)" ]; then
  echo "Changing default shell to Zsh..."
  chsh -s "$(which zsh)"
  echo "Default shell changed to Zsh. Log out and log back in for the changes to take effect."
else
  echo "Zsh is already the default shell. Skipping..."
fi

# Install fzf
if [ ! -d "$HOME/.fzf" ]; then
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install --bin
else
  echo "fzf is already installed. Skipping..."
fi

# install nvm
if [ ! -d "$HOME/.nvm" ]; then
  echo "Installing nvm..."
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
else
  echo "nvm is already installed. Skipping..."
fi
source "$HOME/.nvm/nvm.sh"

# install global version of node
install_node() {
  local node_version="v20.18.0"

  echo "Installing/updating global version of node..."

  nvm install "${node_version}"
  nvm alias default "${node_version}"

  echo "Node ${node_version} has been installed and set as default"
}
install_node

# install global node applications
npm install -g @taplo/cli prettier yarn neovim tree-sitter-cli

# install rust and cargo
curl https://sh.rustup.rs -sSf | sh -s -- -y

# install rust tools
cargo install fd-find ripgrep

# install lua tools
sudo luarocks install luacheck

# install starship
curl -sS https://starship.rs/install.sh | sh -s -- -y

# install shfmt
go install mvdan.cc/sh/v3/cmd/shfmt@latest

# install pyenv
if [ ! -d "${HOME}/.pyenv" ]; then
  curl https://pyenv.run | bash
else
  echo "pyenv is already installed. Skipping..."
fi

# install global version of python
echo "Installing/updating global version of python..."
PY_VERSION=3.11.3
pyenv install --skip-existing "${PY_VERSION}"
pyenv global "${PY_VERSION}"
pyenv exec pip install --upgrade pip

# install python applications
install_or_update_app_with_pipx() {
  local pyenv_python
  pyenv_python="$(pyenv which python)"

  for package in "$@"; do
    echo "Installing ${package} with pipx"
    pipx install --python "${pyenv_python}" "${package}"
  done
}

# first, uninstall all applications managed by pipx
pipx uninstall-all

install_or_update_app_with_pipx "black" \
  "codespell" \
  "flake8" \
  "isort" \
  "mypy" \
  "pycodestyle" \
  "pylint" \
  "virtualenv" \
  "parquet-tools" \
  "pipenv" \
  "hatch" \
  "argcomplete" \
  "tox" \
  "poetry"

# install tmux plugin manager
if [ ! -d "${HOME}/.tmux/plugins/tpm" ]; then
  echo "Installing tmux plugin manager..."
  mkdir -p "${HOME}/.tmux/plugins"
  git clone https://github.com/tmux-plugins/tpm "${HOME}/.tmux/plugins/tpm"
else
  echo "tmux plugin manager is already installed. Skipping..."
fi

# install lazygit
install_lazygit() {
  local temp_dir=$(mktemp -d)
  local lazygit_version=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | \grep -Po '"tag_name": *"v\K[^"]*')
  local lg_url="https://github.com/jesseduffield/lazygit/releases/download/v${lazygit_version}/lazygit_${lazygit_version}_Linux_x86_64.tar.gz"
  local temp_file_archive="${temp_dir}/lazygit.tar.gz"

  curl -Lo "${temp_file_archive}" "${lg_url}"
  tar xzf "${temp_file_archive}" -C "${temp_dir}" lazygit
  sudo install "${temp_dir}/lazygit" /usr/local/bin

  echo "lazygit has been installed successfully."
}
install_lazygit

# install delta
install_delta() {
  local temp_dir=$(mktemp -d)
  local delta_version="0.18.2"
  local url="https://github.com/dandavison/delta/releases/download/${delta_version}/git-delta_${delta_version}_amd64.deb"
  local temp_file="${temp_dir}/git-delta_${delta_version}_amd64.deb"

  curl -Lo "$temp_file" "$url"
  sudo dpkg -i "$temp_file"
  rm -rf "$temp_dir"

  echo "delta has been installed successfully."
}
install_delta

# install nvim
install_nvim() {
  local temp_dir=$(mktemp -d)
  local nvim_version="0.10.3"
  local nvim_url="https://github.com/neovim/neovim/releases/download/v${nvim_version}/nvim-linux64.tar.gz"
  local temp_file="${temp_dir}/nvim-linux64.tar.gz"

  curl -Lo "${temp_file}" "${nvim_url}"
  sudo rm -rf /opt/nvim
  sudo tar -C /opt -xzf "${temp_file}"

  echo "nvim has been installed successfully."
}
install_nvim

# install lunarvim
if [ ! -d "${HOME}/.local/share/lunarvim/lvim" ]; then
  bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh) --no-install-dependencies
  echo "lunarvim has been installed"
else
  echo "lunarvim is already installed. Skipping..."
fi
